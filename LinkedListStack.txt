#include <stdio.h>
#include<stdlib.h>
#include<limits.h>

struct listNode{
    int data;
    struct listNode* next;
};

struct stack{
    struct listNode *top;
};

struct stack* createStack(int capacity) {
    struct stack *S = (struct stack*)malloc(sizeof(struct stack));
    if(!S)
        return NULL;
    S -> top = NULL;
    return S;
}

int isEmpty(struct stack *s) {
    return s -> top==NULL;
}

int push(struct stack* s) {
    struct listNode* temp;
    temp = (struct listNode*)malloc(sizeof(struct listNode));

    printf("Enter the element: ");
    scanf("%d", &temp -> data);
    
    temp -> next = s -> top;
    s -> top = temp;
}

int peek(struct stack* s) {
    if(!isEmpty(s))
        printf("%d", s -> top -> data);

    printf("Stack is empty");
}

int pop(struct stack* s) {
    if(!isEmpty(s)) {
         struct listNode * temp = s -> top;
        s -> top = s -> top -> next;
        int data = temp -> data;
        free(temp);
        return data;
    }
    printf("Stack is empty");
}

int deleteStack(struct stack* s) {
    struct listNode *temp, *p;
    p = s -> top;
    while(p) {
    temp = p -> next;
    p = p -> next;
    free(temp);
    }
    free(s);
}

int main() {
    int capacity;
    printf("Enter the capacity of Stack :");
    scanf("%d", &capacity);
    struct stack *stk = createStack(capacity);
    for(int i = 0; i < capacity; i++) {
        push(stk);
    }
    push(stk);
    peek(stk);
    for(int i = 0; i < capacity; i++){
    printf("%d is popped", pop(stk));
    }    
    peek(stk);
    deleteStack(stk);
    return 0;
}
